{"name": "Переход в раздел История заказов по клику на гиперссылку История заказов", "status": "failed", "statusDetails": {"message": "AssertionError: ElementClickInterceptedException()\nassert False", "trace": "request = <SubRequest 'logged_in_main_page_driver' for <Function test_go_to_order_history_page_from_account_profile_page_by_button_click[firefox]>>\n\n    @allure.step('Настройка драйвера браузера с регистрацией пользователя {request}')\n    @pytest.fixture(params=['chrome', 'firefox'])\n    def logged_in_main_page_driver(request):\n        faker = Faker()\n        status_code = 0\n        user_data = None\n        access_token = None\n        while status_code != 200:\n            user_data = {\n                \"email\": faker.email(),\n                \"password\": faker.password(),\n                \"name\": faker.name()\n            }\n            response = register_user(user_data)\n            access_token = response.json().get(\"accessToken\")\n            status_code = response.status_code\n        try:\n            driver = setup_driver(request.param)\n            driver.get(urls.LOGIN_PAGE)\n            WebDriverWait(driver, 15).until(expected_conditions.url_to_be(urls.LOGIN_PAGE))\n            email_field = driver.find_element(*locators.login_page.EMAIL_FIELD)\n            email_field.send_keys(user_data[\"email\"])\n            pass_field = driver.find_element(*locators.login_page.PASS_FIELD)\n            pass_field.send_keys(user_data[\"password\"])\n            enter_button = driver.find_element(*locators.login_page.ENTER_BUTTON)\n            WebDriverWait(driver, 15).until(expected_conditions.element_to_be_clickable(locators.login_page.ENTER_BUTTON))\n>           enter_button.click()\n\nconftest.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002818C2B0EF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"button_but...ry__1O7Bx button_button_size_medium__3zxIa\\\\\">\",\"overlayingElement\":\"<div class=\\\\\"Modal_modal_overlay__x2ZCr\\\\\">\"}}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_medium__3zxIa\"> is not clickable at point (636,548) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:197:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:342:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:344:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:220:31\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'logged_in_main_page_driver' for <Function test_go_to_order_history_page_from_account_profile_page_by_button_click[firefox]>>\n\n    @allure.step('Настройка драйвера браузера с регистрацией пользователя {request}')\n    @pytest.fixture(params=['chrome', 'firefox'])\n    def logged_in_main_page_driver(request):\n        faker = Faker()\n        status_code = 0\n        user_data = None\n        access_token = None\n        while status_code != 200:\n            user_data = {\n                \"email\": faker.email(),\n                \"password\": faker.password(),\n                \"name\": faker.name()\n            }\n            response = register_user(user_data)\n            access_token = response.json().get(\"accessToken\")\n            status_code = response.status_code\n        try:\n            driver = setup_driver(request.param)\n            driver.get(urls.LOGIN_PAGE)\n            WebDriverWait(driver, 15).until(expected_conditions.url_to_be(urls.LOGIN_PAGE))\n            email_field = driver.find_element(*locators.login_page.EMAIL_FIELD)\n            email_field.send_keys(user_data[\"email\"])\n            pass_field = driver.find_element(*locators.login_page.PASS_FIELD)\n            pass_field.send_keys(user_data[\"password\"])\n            enter_button = driver.find_element(*locators.login_page.ENTER_BUTTON)\n            WebDriverWait(driver, 15).until(expected_conditions.element_to_be_clickable(locators.login_page.ENTER_BUTTON))\n            enter_button.click()\n            WebDriverWait(driver, 15).until(expected_conditions.url_to_be(urls.MAIN_PAGE))\n            yield driver\n        except Exception as e:\n            delete_user(access_token)\n>           assert False, e\nE           AssertionError: ElementClickInterceptedException()\nE           assert False\n\nconftest.py:68: AssertionError"}, "parameters": [{"name": "logged_in_main_page_driver", "value": "'firefox'"}], "start": 1741180225983, "stop": 1741180225983, "uuid": "d8117229-74b6-498d-8405-2c3736162ba2", "historyId": "c36eca5b2764d752aee5e9edaf3eac5d", "testCaseId": "83f55882f88aa7eac80faed9806347dd", "fullName": "tests.test_account_profile_page.TestAccountProfilePage#test_go_to_order_history_page_from_account_profile_page_by_button_click", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_account_profile_page"}, {"name": "subSuite", "value": "TestAccountProfilePage"}, {"name": "host", "value": "DESKTOP-COFPMM2"}, {"name": "thread", "value": "39068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_account_profile_page"}]}